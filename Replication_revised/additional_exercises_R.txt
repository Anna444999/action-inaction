Exercises R Paper replication:

Take the first two chunks of the rmarkdown file and improve the following points in the code:

1. Ensure Reproducability
Consider a scenario where you run your code on another machine, or share it with collaborators, and it unexpectedly breaks because their R environment has different versions of packages than yours. 
This could lead to inconsistent results or bugs that are difficult to trace.

Consider how you could lock in the package versions you're using. 
You should look into ways to manage these package dependencies systematically, ensuring that your environment is consistent across platforms and over time.


2. Manage file paths and directories
In the original code, no file paths were specified when saving plots or outputs, meaning files would be saved in the current working directory by default. 
While this might work in simple cases, relying on default file locations can cause several issues:

- Lack of Control: It is easy to lose track of where your files are being saved, especially in larger projects or when moving between different environments.
- Organization: Without a clear folder structure, your files can become disorganized, especially if you're generating many outputs like plots or reports.

Adjust the code so that all outputs are saved to a designated location, making it easier to keep track of them. 
Think about how you could set a single path at the start of your script to manage all file-saving operations.


3. Automate Plot generation
Assume the dataset contains more variables, and you need to create the same type of plot for each variable. 
Manually copying and pasting the same block of code for each plot is tedious and can easily lead to errors, making the script harder to maintain.
For instance, if you need to change the plot style later, you would have to modify every block.

Try to automate this process by defining the plotting function once and looping through the variables.


4. Commenting code
The current markdown file has limited commenting, which makes it harder to understand the rationale behind the code. 
While it may be clear what the code is doing, itâ€™s equally important to explain why certain choices were made. 

Think about how thorough commenting can save time and effort in the long run. 
How could adding better comments improve the readability and maintainability of the markdown file?


EXTRA TASK:
5. NA values 
The data contains a significant number of NA values, and it is essential to understand how these are handled throughout the code. 
Depending on the implementation, these NAs might be ignored, omitted, or cause errors in certain functions, leading to potentially misleading results.

Make sure you understand how these are handled currently and think about potential adjustments (removing, imputing, visualizing missing patterns) and how they would affect the results/outputs.









 
